<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eva.core.framework</name>
    </assembly>
    <members>
        <member name="T:eva.core.framework.framework.Agent">
            <summary>
            Abstract class for all Types of Agents
            public members -
                            IAgentActivator activator
                            ISelector selector
            protected members -
                            batchid - the current batch being processed
                            SolutionIdGenerator generateId - a way to generate ids before inserting in a database
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Agent.batchid">
            <summary>
            Batch Id of the solutions this agent will work on
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Agent.activator">
            <summary>
            This agents activator
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Agent.selector">
            <summary>
            This agents selector
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Agent.generateId">
            <summary>
            This agents solution id generator
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.Agent.insertIntoDatabase(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            inserts solutions generated by the agent into a database
            </summary>
            <param name="slns">the solutions to be inserted</param>
            <returns>The soutions after inserting them into the database</returns>
        </member>
        <member name="M:eva.core.framework.framework.Agent.run(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Runs the agent using the solution manager
            </summary>
            <param name="sm">the solution manager to be used while running the agent</param>
            <returns>the solutions generated by the agent</returns>
        </member>
        <member name="M:eva.core.framework.framework.Agent.#ctor(eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Every agent has to have an activator and a selector
            </summary>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.core.framework.framework.Agent.activate(eva.core.framework.framework.ISolutionManger)">
            <summary>
            tells you wether the agent has to be activated
            </summary>
            <param name="sm">the solution manager as a required field to run the test</param>
            <returns>returns the result of the test</returns>
        </member>
        <member name="M:eva.core.framework.framework.Agent.assignBatchId(System.Int32)">
            <summary>
            Assigns a batchid on which the solution has to work
            </summary>
            <param name="batch_id">the batch id to be assigned</param>
        </member>
        <member name="M:eva.core.framework.framework.Agent.assignGenerator(eva.core.framework.framework.SolutionIdGenerator)">
            <summary>
            Assigns a solutionId Generator to the agent which can later be used to generate solutions
            a new instace of the generator is created everyt time for thread safety
            </summary>
            <param name="gn"> the generator to be used</param>
        </member>
        <member name="M:eva.core.framework.framework.Agent.assignStream(System.Collections.Concurrent.BlockingCollection{eva.core.framework.framework.ISolution})">
            <summary>
            Takes in a blocking collection and assigns to this agent
            </summary>
            <param name="stream">the blocking collection to be assigned</param>
        </member>
        <member name="M:eva.core.framework.framework.Agent.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Selects the solutions on which the agent will run 
            </summary>
            <param name="sm">the solution manager which is used to select the solutions</param>
            <returns>selectd solutions</returns>
        </member>
        <member name="T:eva.core.framework.framework.IAgentActivator">
            <summary>
            An interface for Agent Activators
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.IAgentActivator.activate(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Test for activation
            </summary>
            <param name="sm">The solution manager to be used for testing</param>
            <returns>the result of test</returns>
        </member>
        <member name="T:eva.core.framework.framework.AgentActivator">
            <summary>
            An Abstract class for all Agent Activators
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.AgentActivator.activate(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Test for activation
            </summary>
            <param name="sm">The solution manager to be used for testing</param>
            <returns>the result of test</returns>
        </member>
        <member name="T:eva.core.framework.framework.DefaultAgentActivator">
            <summary>
            an agent that always returns true for CreatorAgents 
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.DefaultAgentActivator.activate(eva.core.framework.framework.ISolutionManger)">
            <summary>
            always true
            </summary>
            <param name="sm">The solution manager to be used for testing</param>
            <returns>the result of test</returns>
        </member>
        <member name="T:eva.core.framework.framework.NonZeroPopulationActivator">
            <summary>
            an agent which works where there are one or more solutions present in the population
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.NonZeroPopulationActivator.activate(eva.core.framework.framework.ISolutionManger)">
            <summary>
            returns true only when there is a solution in the population
            </summary>
            <param name="sm">The solution manager to be used for testing</param>
            <returns>the result of test</returns>
        </member>
        <member name="T:eva.core.framework.framework.PopulationSizeRangeActivator">
            <summary>
            an agent that only works when there are certain number of solutions present in the population
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.PopulationSizeRangeActivator.minimum">
            <summary>
            private member storing the min number
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.PopulationSizeRangeActivator.#ctor(System.Int32)">
            <summary>
            Constructor taking the input for minimum number of solutions
            </summary>
            <param name="min">the number</param>
        </member>
        <member name="M:eva.core.framework.framework.PopulationSizeRangeActivator.activate(eva.core.framework.framework.ISolutionManger)">
            <summary>
            activates only after a certain number of solutions are presnet in the population
            </summary>
            <param name="sm">The solution manager to be used for testing</param>
            <returns>the result of test</returns>
        </member>
        <member name="T:eva.core.framework.framework.CreaterAgent">
            <summary>
            abstract class for creater agents
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.CreaterAgent.createNewSolutions">
            <summary>
            Creates new solutions
            </summary>
            <returns>Returns the newly created solutions</returns>
        </member>
        <member name="M:eva.core.framework.framework.CreaterAgent.#ctor(eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Every agent has to have an activator and a selector
            </summary>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.core.framework.framework.CreaterAgent.run(eva.core.framework.framework.ISolutionManger)">
            <summary>
            First checks if the solution is activated and then creates new solution
            then inserts the newly created solutions into the database after assinging
            them a batch id and solution id else returns an empty solution
            </summary>
            <param name="sm">the solution manager to be used while running the agent</param>
            <returns>the solutions generated by the agent</returns>
        </member>
        <member name="T:eva.core.framework.framework.DefaultSolutionSelector">
            <summary>
            The default solution selector
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.DefaultSolutionSelector.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Selects no solutions
            </summary>
            <param name="sm">The solution manager to work with</param>
            <returns>an empty list</returns>
        </member>
        <member name="T:eva.core.framework.framework.DestroyerAgent">
            <summary>
            An Abstract class for Destroyer Agents
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.DestroyerAgent.slnManager">
            <summary>
            The solution Manager to wor with
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.DestroyerAgent.destroy(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Generic method which destroies Solutions and inserts the solutions
            destrouyed in the database (works in reverse order)
            </summary>
            <param name="solutions">the solutions not be destroyed</param>
        </member>
        <member name="M:eva.core.framework.framework.DestroyerAgent.#ctor(eva.core.framework.framework.ISolutionManger,eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Constructor to create destroyer agents
            </summary>
            <param name="sm">the solution manager to work with</param>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.core.framework.framework.DestroyerAgent.run(eva.core.framework.framework.ISolutionManger)">
            <summary>
            runs the agent after checking if its activated by selecting solutions not to be deleted
            </summary>
            <param name="sm">the solution manager to work with</param>
            <returns>An empty list of solutions</returns>
        </member>
        <member name="T:eva.core.framework.framework.RemoveDuplicates">
            <summary>
            nothing special selector does the main work 
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.RemoveDuplicates.#ctor(eva.core.framework.framework.ISolutionManger,eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Constructor to create destroyer agents
            </summary>
            <param name="sm">the solution manager to work with</param>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.core.framework.framework.RemoveDuplicates.destroy(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Wethod which destroies Solutions and inserts the solutions
            destrouyed in the database (works in reverse order)
            </summary>
            <param name="solutions">the solutions not be destroyed</param>
        </member>
        <member name="T:eva.core.framework.framework.UserEnabledDestroyer">
            <summary>
            nothing special selector does the main work 
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.UserEnabledDestroyer.#ctor(eva.core.framework.framework.ISolutionManger,eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Constructor to create destroyer agents
            </summary>
            <param name="sm">the solution manager to work with</param>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.core.framework.framework.UserEnabledDestroyer.destroy(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Wethod which destroies Solutions and inserts the solutions
            destrouyed in the database (works in reverse order)
            </summary>
            <param name="solutions">the solutions not be destroyed</param>
        </member>
        <member name="T:eva.core.framework.framework.RemoveDominatedSolutions">
            <summary>
            nothing special selector does the main work 
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.RemoveDominatedSolutions.#ctor(eva.core.framework.framework.ISolutionManger,eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Constructor to create destroyer agents
            </summary>
            <param name="sm">the solution manager to work with</param>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.core.framework.framework.RemoveDominatedSolutions.destroy(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Wethod which destroies Solutions and inserts the solutions
            destrouyed in the database (works in reverse order)
            </summary>
            <param name="solutions">the solutions not be destroyed</param>
        </member>
        <member name="T:eva.core.framework.framework.DuplicateSolutionSelector">
            <summary>
            Returns unique Solutions
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.DuplicateSolutionSelector.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            selects unique solutions from the solution population
            </summary>
            <param name="sm">the solution manager to work with </param>
            <returns>the unique solutions</returns>
        </member>
        <member name="T:eva.core.framework.framework.EvaluationResult">
            <summary>
            A Class depicting an Evaulation Of an Objective
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.EvaluationResult.objectiveName">
            <summary>
            the objective name
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.EvaluationResult.evaluationResult">
            <summary>
            The evaluation of which objective
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.EvaluationResult.#ctor(System.String,System.Double)">
            <summary>
            Constructor 
            </summary>
            <param name="objName">the objective name</param>
            <param name="value">the value of objective evaluation</param>
        </member>
        <member name="T:eva.core.framework.framework.IAgent">
            <summary>
            Interface Depicting an agent
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.IAgent.activator">
            <summary>
            The agent activator
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.IAgent.selector">
            <summary>
            The selector for the agent
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.IAgent.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            a way to run the selector
            </summary>
            <param name="sm">The solution Manager to work with</param>
            <returns>A List of selected solutions</returns>
        </member>
        <member name="M:eva.core.framework.framework.IAgent.activate(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Test to check if the agent is activated
            </summary>
            <param name="sm">The solution manager to work with</param>
            <returns>the result of the test</returns>
        </member>
        <member name="M:eva.core.framework.framework.IAgent.run(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Method to run the agen
            </summary>
            <param name="sm">The Solution Manager to work with</param>
            <returns>solutions generated by the agent</returns>
        </member>
        <member name="M:eva.core.framework.framework.IAgent.assignBatchId(System.Int32)">
            <summary>
            A method to assign the batch id to the solutions generated
            </summary>
            <param name="batchid">the batch id to be assigned</param>
        </member>
        <member name="M:eva.core.framework.framework.IAgent.insertIntoDatabase(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            the method which inserts data into the database
            </summary>
            <param name="slns">the solutions to be inserted into the database</param>
            <returns>The solutions after being inserted into the database</returns>
        </member>
        <member name="M:eva.core.framework.framework.IAgent.assignGenerator(eva.core.framework.framework.SolutionIdGenerator)">
            <summary>
            A method used to assign solution Generators
            </summary>
            <param name="gn">the solution Generator to be assigned</param>
        </member>
        <member name="M:eva.core.framework.framework.IAgent.assignStream(System.Collections.Concurrent.BlockingCollection{eva.core.framework.framework.ISolution})">
            <summary>
            Takes in a blocking collection and assigns to this agent
            </summary>
            <param name="stream">the blocking collection to be assigned</param>
        </member>
        <member name="T:eva.core.framework.framework.IConnectionRetriever">
            <summary>
            Interface responsible to get a connection to the undelying database
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.IConnectionRetriever.RetrieveConnection">
            <summary>
            Anonymous function used to get connection string
            </summary>
        </member>
        <member name="T:eva.core.framework.framework.IDbApi">
            <summary>
            The database Api
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.IDbApi.ConnectionRetriever">
            <summary>
            A way to retrieve connection making framework independant of where the connection is stored)
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.IDbApi.insertIntoAllSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Inserts solutions into the database table all_slutions using a prepared statement
            </summary>
            <param name="slns"> the solutions to be inserted</param>
        </member>
        <member name="M:eva.core.framework.framework.IDbApi.getBatchId">
            <summary>
            Fetches the next available batch id after running a transaction which fetches the avialable batch id
            and increments it by one
            </summary>
            <returns>the new batch id</returns>
        </member>
        <member name="M:eva.core.framework.framework.IDbApi.insertIntoDeletedSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Inserts solutions into the database table deleted_solutions using a prepared statement
            </summary>
            <param name="solutions"> the solutions to be inserted</param>
        </member>
        <member name="M:eva.core.framework.framework.IDbApi.getSolutionsForABatchId(System.Int32,System.Func{System.String,eva.core.framework.framework.ISolution})">
            <summary>
            Joins deleted_solutions and all_solutions to find the non dominated solutions
            for a particular batch id 
            </summary>
            <param name="batchId">the batch id who's non-dominated solutions are to be found</param>
            <param name="convertSerializedData"> an anonymous functions which typically converts the serialized data of the solution
            fetched into a Isolution Object</param>
            <returns>the non dominated solutions for that batch id</returns>
        </member>
        <member name="M:eva.core.framework.framework.IDbApi.FetchSerializedDataFromDb(System.Int32,System.Int32)">
            <summary>
            Creates a connection to the database
            executes a query which fetches data based on a solution id and batchid
            </summary>
            <param name="solutionid">the solution id of the solution</param>
            <param name="batchid">the batch id of the solution</param>
            <returns>a string whic consists the serialized solution</returns>
        </member>
        <member name="M:eva.core.framework.framework.IDbApi.fetchNewAvailableIds(System.String,System.Int32)">
            <summary>
            Fetches new available ids
            </summary>
            <param name="tableName">the table name to fetch ids from</param>
            <param name="estimatedRange">the number of ids to fetch</param>
            <returns>The first available id and books a slot for you based on the range</returns>
        </member>
        <member name="T:eva.core.framework.framework.ISelector">
            <summary>
            interface for selectors
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.ISelector.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Generic method to be implemented for selection
            </summary>
            <param name="sm">the solution manager to work with </param>
            <returns>The selected solutions</returns>
        </member>
        <member name="T:eva.core.framework.framework.Selectors">
            <summary>
            Abstract class for selectors
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.Selectors.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            method to select solutions
            </summary>
            <param name="sm">the solution manager to work with</param>
            <returns>The selected solutions</returns>
        </member>
        <member name="T:eva.core.framework.framework.ISolution">
            <summary>
            represents a solution
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolution.solutionid">
            <summary>
            the id of the solutions 
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolution.batchid">
            <summary>
            the batch id of the solution 
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.ISolution.doClone">
            <summary>
            A method to generate clones of this solution
            </summary>
            <returns>A clone of this solution</returns>
        </member>
        <member name="P:eva.core.framework.framework.ISolution.objectiveEvaluation">
            <summary>
            The list of objective evaluations of this solution
            </summary>
        </member>
        <member name="T:eva.core.framework.framework.ISolutionManger">
            <summary>
            Represents a solution manager
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.ISolutionManger.run">
            <summary>
            method to run the optimizer
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.ISolutionManger.printStuff">
            <summary>
            Temporary method to print stuff on the screen
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.objs">
            <summary>
            the list of objectives against which a solution is to be evaluated
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.population">
            <summary>
            current solutionwith which the optimizer is working with 
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.createrAgents">
            <summary>
            creator agents to create solutions
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.destroyerAgents">
            <summary>
            destroyer agents
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.workerAgents">
            <summary>
            worer agents
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.batchid">
            <summary>
            the batch id of this run
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.ISolutionManger.rerun(System.Collections.Generic.List{eva.core.framework.framework.Rule},System.Int32)">
            <summary>
            method which re runs the opotimizer using rules
            </summary>
            <param name="newRules">The Rules</param>
            <param name="batchId">Batchid of the previous run</param>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.gen">
            <summary>
            the solution id generator
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.ConnectionRetriever">
            <summary>
            A way to retrieve connection making framework independant of where the connection is stored)
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.ISolutionManger.DbApi">
            <summary>
            The database api to interact with
            </summary>
        </member>
        <member name="T:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Not yet used but basically limits concrurrency standard microsoft code
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary>
        </member>
        <member name="F:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary>
        </member>
        <member name="F:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary>
        </member>
        <member name="F:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary>
        </member>
        <member name="M:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the
            specified degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param>
        </member>
        <member name="M:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Informs the ThreadPool that there's work to be executed for this scheduler.
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued"></param>
            <returns>Whether the task could be executed on the current thread.</returns>
        </member>
        <member name="M:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary>
            <param name="task">The task to be removed.</param>
            <returns>Whether the task could be found and removed.</returns>
        </member>
        <member name="P:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:eva.core.framework.framework.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary>
            <returns>An enumerable of the tasks currently scheduled.</returns>
        </member>
        <member name="T:eva.core.framework.framework.NonDominatedSolutionSelector">
            <summary>
            Selects the non-dominated solutions
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:eva.core.framework.framework.NonDominatedSolutionSelector.select(eva.core.framework.framework.ISolutionManger)" -->
        <member name="M:eva.core.framework.framework.NonDominatedSolutionSelector.checkifSlnDominates(eva.core.framework.framework.ISolution,eva.core.framework.framework.ISolution,eva.core.framework.framework.ISolutionManger)">
            <summary>
            Tests if solutions s1 dominates s2
            by comparing each objective evaluation
            </summary>
            <param name="s1">First solution</param>
            <param name="s2">Second Solution</param>
            <param name="sm">The solution Manager to work with</param>
            <returns>the result of the test</returns>
        </member>
        <member name="T:eva.core.framework.framework.ObjectExtensions">
            <summary>
            i Have to remove this class's dependancy
            basically performs a deep copy of the object and all its properties and fields.
            </summary>
        </member>
        <member name="T:eva.core.framework.framework.Objective">
            <summary>
            An Abstract Calss representing an objective
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.Objective.name">
            <summary>
            name of the objective
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.Objective.target">
            <summary>
            The target of the objective
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.Objective.precision">
            <summary>
            Precision of the objective
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.Objective.active">
            <summary>
            Depitcts if the objective is active
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.Objective.isAsc">
            <summary>
            Specifies wether reducing this objective is advantageous or maximizing this objective is
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.Objective.evaluate(eva.core.framework.framework.ISolution)">
            <summary>
            A method to run the evaluation
            </summary>
            <param name="solution">the solution against which this object is to evaluated</param>
            <returns>the evaluated result of the solution</returns>
        </member>
        <member name="M:eva.core.framework.framework.Objective.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor taking parameters from config file
            </summary>
            <param name="para">the parameters read from a config file</param>
        </member>
        <member name="M:eva.core.framework.framework.Objective.#ctor">
            <summary>
            Empty COnstructor
            </summary>
        </member>
        <member name="T:eva.core.framework.framework.RandomSolutionSelector">
            <summary>
            Randomly selects a solution from the population
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.RandomSolutionSelector.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            Selects a solution at random using Secure random a non-pseudo random number generator
            selects a soltuion clones it and returns it
            </summary>
            <param name="sm">the solution manger to work with </param>
            <returns>a list of the new solution</returns>
        </member>
        <member name="T:eva.core.framework.framework.Resource">
            <summary>
            A class representing Resources
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.Resource.#ctor">
            <summary>
            Empty Constructor used for resouces
            </summary>
        </member>
        <member name="T:eva.core.framework.framework.Rule">
            <summary>
            a class representing a rule
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Rule.ComparisonPredicate">
            <summary>
            the property name which stores the objective value
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Rule.ComparisonOperator">
            <summary>
            an expression which consists of the equality sign used
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Rule.ComparisonValue">
            <summary>
            the value to be compared
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Rule.objectiveName">
            <summary>
            the objectiveName against which the rule is defined
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.Rule.#ctor(System.Linq.Expressions.ExpressionType,System.String,System.String)">
            <summary>
            rule constructor
            </summary>
            <param name="comparisonOperator">The Operator expression</param>
            <param name="comparisonValue">the value against which this comparrision is to be done</param>
            <param name="objName">the objective name</param>
        </member>
        <member name="T:eva.core.framework.framework.RulesExpressionGenerator">
            <summary>
            Converts rules to expressions which can then be converted to executble code
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.RulesExpressionGenerator.CreateRuleExpression``1(System.Collections.Generic.List{eva.core.framework.framework.Rule})">
            <summary>
             a method used to precompile rules for a provided type
            </summary>
            <typeparam name="T">The type on which this rule is to be executed eg ISolution</typeparam>
            <param name="rules">the rules defined by the user</param>
            <returns>an expression dictionay which on compiling reveals the code to on how t evaluate a particular rule</returns>
        </member>
        <member name="T:eva.core.framework.framework.SecureRandom">
            <summary>
            A Class which generates Random Numbers using RNGCryptoServiceProvider used to get better randomness
            but is a little slow
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.SecureRandom.rng">
            <summary>
            RNGCryptoServiceProvider class
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SecureRandom.Next">
            <summary>
            Returns the next random number
            </summary>
            <returns>a random number</returns>
        </member>
        <member name="M:eva.core.framework.framework.SecureRandom.Next(System.Int32)">
            <summary>
            Returns a random number which is smaller than max value
            </summary>
            <param name="maxValue">the max value of the random number</param>
            <returns>a random number smaller than max value</returns>
        </member>
        <member name="M:eva.core.framework.framework.SecureRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number which is smaller than max value and greater than the min
            </summary>
            <param name="maxValue">the max value of the random number</param>
            <param name="minValue">the min value of the random number</param>
            <returns>a random number between max and min</returns>
        </member>
        <member name="M:eva.core.framework.framework.SecureRandom.NextDouble">
            <summary>
            Function used to fetch a random double
            </summary>
            <returns>the double value</returns>
        </member>
        <member name="M:eva.core.framework.framework.SecureRandom.GetBytes(System.Byte[])">
            <summary>
            Fetches bytes from eng crypto service
            </summary>
            <param name="data">the data to be converted to bytes</param>
        </member>
        <member name="M:eva.core.framework.framework.SecureRandom.GetNonZeroBytes(System.Byte[])">
            <summary>
            fetches non-zero bytes from rng crypto service
            </summary>
            <param name="data">the data whose bytes are to be fetched</param>
        </member>
        <member name="T:eva.core.framework.framework.Solution">
            <summary>
            an abstract class represneting a solution
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Solution.solutionid">
            <summary>
            the solution id
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.Solution.batchid">
            <summary>
            the batch id
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.Solution.doClone">
            <summary>
            clones the solution
            </summary>
            <returns>A clone of this solution</returns>
        </member>
        <member name="P:eva.core.framework.framework.Solution.objectiveEvaluation">
            <summary>
            The list of objective evaluations of this solution
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.Solution.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is used by the serializer
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="M:eva.core.framework.framework.Solution.SerializeData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Proivdes more ways in which the solution can be serialized
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="M:eva.core.framework.framework.Solution.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            this constructor is used by de-serializer by default batch id solution id and objective evaluation
            are de-serialized for you
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The sreaming context</param>
        </member>
        <member name="M:eva.core.framework.framework.Solution.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="T:eva.core.framework.framework.SolutionIdGenerator">
            <summary>
            A Class responsible for creating unsed ids for solutions
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionIdGenerator.dbapi">
            <summary>
            the api to fetch ids from
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.SolutionIdGenerator.currentId">
            <summary>
            the current free id
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.SolutionIdGenerator.initialId">
            <summary>
            the first id generated by this class
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.SolutionIdGenerator.range">
            <summary>
            the total number of free ids availabale
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.SolutionIdGenerator.tableName">
            <summary>
            the table name to fetch ids from
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SolutionIdGenerator.#ctor(System.String,System.Int32,eva.core.framework.framework.IDbApi)">
            <summary>
            Initialize this class with the table to name to fetch ids from and the number of ids to be fetched
            </summary>
            <param name="tableName">the table to fetch ids from</param>
            <param name="estimatedRange">the total number of ids to be fetched</param>
            <param name="api">the api to fetch ids from</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionIdGenerator.getId">
            <summary>
            get the next available free id
            </summary>
            <returns>the next available free id</returns>
        </member>
        <member name="T:eva.core.framework.framework.SolutionManager">
            <summary>
            An abstract class for all solution managers contains objectives
            solution population various agents and resources
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.ConnectionRetriever">
            <summary>
            A way to retrieve connection making framework independant of where the connection is stored)
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.DbApi">
            <summary>
            The database api to interact with
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.objs">
            <summary>
            The objectives of to optimize
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.population">
            <summary>
            The solutions produced by the optimizer
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.batchid">
            <summary>
            the batch id to work with
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.createrAgents">
            <summary>
            Creator agents for creating solutions
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.destroyerAgents">
            <summary>
            The destroyer agents to destroy the solutions
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.workerAgents">
            <summary>
            the worker agents to work on the solutions
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.gen">
            <summary>
            The solution id generator for agents
            </summary>
        </member>
        <member name="P:eva.core.framework.framework.SolutionManager.availableResources">
            <summary>
            the single static copy of the resources
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.SolutionManager.allSolutionsStream">
            <summary>
            A thread safe collection to insert solutions into all solutions
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.SolutionManager.deletedSolutionsStream">
            <summary>
            A thread safe collection to insert solutions into deleted solutions
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.printStuff">
            <summary>
            Used just to print stuff
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.#ctor(eva.core.framework.framework.IConnectionRetriever)">
            <summary>
            constructor
            </summary>
            <param name="connectionRetriever">the retriever from where to fetch the connection</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.SetResource(eva.core.framework.framework.Resource)">
            <summary>
            find a better way please
            </summary>
            <param name="r">The Resources</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.GetResource">
            <summary>
            find a better way please
            </summary>
            <returns></returns>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.addSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            concats two lists to return a new list
            </summary>
            <param name="slns">the solution list to be combined with the population</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.fetchBatchId">
            <summary>
            fetches the next available batchid and returns it
            </summary>
            <returns>the next available batch id</returns>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.run">
            <summary>
            runs the optimizer
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.waitForThreads(System.Threading.Tasks.Task,System.Threading.Tasks.Task)">
            <summary>
            waits for the assigned threads
            </summary>
            <param name="t1">first thread</param>
            <param name="t2">second thread</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.stopStreams">
            <summary>
            Stops the streams from taking in any new elements
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.initializeStreams">
            <summary>
            initilaizes the streams
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.startAllSolutionInsert">
            <summary>
            async task which starts inserting into all solutions
            </summary>
            <returns>the task object</returns>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.startDeletedSolutionInsert">
            <summary>
            async task which starts inserting into deleted solutions
            </summary>
            <returns>the task object</returns>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.cleanup">
            <summary>
            Runs all the destroyer agents as a clean up
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.runAndEvaluateObjective(eva.core.framework.framework.ISolution)">
            <summary>
            evaluates objectives based on the solution
            </summary>
            <param name="x">the solution to run evaluate objectives against</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.rerun(System.Collections.Generic.List{eva.core.framework.framework.Rule},System.Int32)">
            <summary>
            Re runs the optimizer using the defined rules 
            </summary>
            <param name="newRules">the list of new rules</param>
            <param name="batchId">the batchid of the solutions againast which this runs</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.createRulesAndDestroyerAgents(System.Collections.Generic.List{eva.core.framework.framework.Rule})">
            <summary>
            creates new destroyer agents based on the rules
            </summary>
            <param name="newRules">the rules</param>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.getSolutionsForABatchId(System.Int32)">
            <summary>
            an abstract method which tells the solution manager on how to get the solutions for a particular
            batch id
            </summary>
            <param name="batchId"> the batch id</param>
            <returns>the list of fetched solutions</returns>
        </member>
        <member name="M:eva.core.framework.framework.SolutionManager.runAgents(System.Collections.Generic.IEnumerable{eva.core.framework.framework.IAgent},System.Collections.Concurrent.BlockingCollection{eva.core.framework.framework.ISolution})">
            <summary>
            runs the agents
            </summary>
            <param name="agents">the agents to run</param>
            <param name="stream">the stream with which the agents would work with</param>
        </member>
        <member name="T:eva.core.framework.framework.TextFileReader`1">
            <summary>
            A Generic text file reader
            </summary>
            <typeparam name="T">the object to which the rows read are to be converted</typeparam>
        </member>
        <member name="F:eva.core.framework.framework.TextFileReader`1.path">
            <summary>
            the file path
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.TextFileReader`1.header">
            <summary>
            the headers in the file
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.TextFileReader`1.#ctor(System.String)">
            <summary>
            constructor taking the file path
            </summary>
            <param name="filepath">the path of the file</param>
        </member>
        <member name="M:eva.core.framework.framework.TextFileReader`1.readFile">
            <summary>
            A method which reads the file
            </summary>
            <returns>an Ienumerble of the rows read ie returns each row at a time</returns>
        </member>
        <member name="M:eva.core.framework.framework.TextFileReader`1.ReadFileAndConvert(System.Func{System.String[],System.String[],`0})">
            <summary>
            This method reads each row and converts it into the specified object
            </summary>
            <param name="converter">an anonymous function which takes the file headers as an input and the
            row read as an inpt and converts them into objects of the specified type</param>
            <returns>a list of objects which are read from the file</returns>
        </member>
        <member name="T:eva.core.framework.framework.UserEnabledSelectors">
            <summary>
            this selector is used to select solutions using rules
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.UserEnabledSelectors.ruleExpr">
            <summary>
            the rule expression which takes in an evaluation result and tells us if the solution satisfies
            the rule defined by the user
            </summary>
        </member>
        <member name="F:eva.core.framework.framework.UserEnabledSelectors._objectiveName">
            <summary>
            the name of the objective on which the rule has run
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.UserEnabledSelectors.#ctor(System.Linq.Expressions.Expression{System.Func{eva.core.framework.framework.EvaluationResult,System.Boolean}},System.String)">
            <summary>
            Constructor to run rule destroyer agents
            </summary>
            <param name="ruleExpr">the code to run the rule</param>
            <param name="objName">the objective to run the rule against</param>
        </member>
        <member name="M:eva.core.framework.framework.UserEnabledSelectors.select(eva.core.framework.framework.ISolutionManger)">
            <summary>
            theis method evaluates the rule on the solution object
            by compiling the rule expression and returning a simple true or false
            depecting wether this rule is satsfied by the solution
            </summary>
            <param name="sm">the solution manager to work with</param>
            <returns>the solutions which satify this rule</returns>
        </member>
        <member name="T:eva.core.framework.framework.WorkerAgent">
            <summary>
            An abstract class depecting Worker Agents
            </summary>
        </member>
        <member name="M:eva.core.framework.framework.WorkerAgent.#ctor(eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Every agent has to have an activator and a selector
            </summary>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.core.framework.framework.WorkerAgent.runWithSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution},eva.core.framework.framework.ISolutionManger)">
            <summary>
            works on the selected solution to produce a new solution
            </summary>
            <param name="selected">the selected solutions</param>
            <param name="sm">the solution manager to work with</param>
            <returns>list of newly created solutions</returns>
        </member>
        <member name="M:eva.core.framework.framework.WorkerAgent.run(eva.core.framework.framework.ISolutionManger)">
            <summary>
            First checks if the solution is activated and then creates new solution
            then inserts the newly created solutions into the database after assinging
            them a batch id and solution id else returns an empty solution
            </summary>
            <param name="sm">the solution manager to be used while running the agent</param>
            <returns>the solutions generated by the agent</returns>
        </member>
    </members>
</doc>
