using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data;

namespace eva.core.framework.framework
{
    /// <summary>
    /// Interface Depicting an agent
    /// </summary>
    public interface IAgent
    {
        /// <summary>
        /// The agent activator
        /// </summary>
        IAgentActivator activator { get; set; }
        /// <summary>
        /// The selector for the agent
        /// </summary>
        ISelector selector { get; set; }
        /// <summary>
        /// a way to run the selector
        /// </summary>
        /// <param name="sm">The solution Manager to work with</param>
        /// <returns>A List of selected solutions</returns>
        IEnumerable<ISolution> select(ISolutionManger sm);
        /// <summary>
        /// Test to check if the agent is activated
        /// </summary>
        /// <param name="sm">The solution manager to work with</param>
        /// <returns>the result of the test</returns>
        bool activate(ISolutionManger sm);
        /// <summary>
        /// Method to run the agen
        /// </summary>
        /// <param name="sm">The Solution Manager to work with</param>
        /// <returns>solutions generated by the agent</returns>
        IEnumerable<ISolution> run(ISolutionManger sm);
        /// <summary>
        /// A method to assign the batch id to the solutions generated
        /// </summary>
        /// <param name="batchid">the batch id to be assigned</param>
        void assignBatchId(int batchid);
        /// <summary>
        /// the method which inserts data into the database
        /// </summary>
        /// <param name="slns">the solutions to be inserted into the database</param>
        /// <returns>The solutions after being inserted into the database</returns>
        IEnumerable<ISolution> insertIntoDatabase(IEnumerable<ISolution> slns);
        /// <summary>
        /// A method used to assign solution Generators
        /// </summary>
        /// <param name="gn">the solution Generator to be assigned</param>
        void  assignGenerator(SolutionIdGenerator gn);

        /// <summary>
        /// Takes in a blocking collection and assigns to this agent
        /// </summary>
        /// <param name="stream">the blocking collection to be assigned</param>
        void assignStream(BlockingCollection<ISolution> stream);
    }
}
