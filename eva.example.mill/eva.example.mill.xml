<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eva.example.mill</name>
    </assembly>
    <members>
        <member name="T:eva.example.mill.mill.AgentAdvanceLateOrders">
            <summary>
            Worker agent which advances late orders
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.AgentAdvanceLateOrders.#ctor(eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Every agent has to have an activator and a selector
            </summary>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>
        </member>
        <member name="M:eva.example.mill.mill.AgentAdvanceLateOrders.runWithSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution},eva.core.framework.framework.ISolutionManger)">
            <summary>
            Finds and Advances every late order by one position 
            </summary>
            <param name="selected">the selected solutions</param>
            <param name="sm">the solution manager to work with</param>
            <returns>list of newly created solutions</returns>
        </member>
        <member name="T:eva.example.mill.mill.AgentAssignOrdersRandomly">
            <summary>
            assigns random orders using Random (using a non pseudo random number generator)
            to create a random assignable order list
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.AgentAssignOrdersRandomly.#ctor(eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Every agent has to have an activator and a selector
            </summary>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>s
        </member>
        <member name="M:eva.example.mill.mill.AgentAssignOrdersRandomly.createNewSolutions">
            <summary>
            creates a new solution by assigning orders randomly
            </summary>
            <returns>the solutions generated by the agent</returns>
        </member>
        <member name="T:eva.example.mill.mill.AgentMoveRandomOrder">
            <summary>
            Picks an order and moves it to the end of any machine
            could also be the same machine
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.AgentMoveRandomOrder.#ctor(eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Every agent has to have an activator and a selector
            </summary>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>s
        </member>
        <member name="M:eva.example.mill.mill.AgentMoveRandomOrder.runWithSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution},eva.core.framework.framework.ISolutionManger)">
            <summary>
            Picks a random order from any machine and moves it to the end of a randomly selected machine 
            (possibly the machine it is currently assigned to).</summary>
            <param name="selected">the solution selected</param>
            <param name="sm">the solution manager to work with</param>
            <returns>the newly generated solution after order change</returns>
        </member>
        <member name="T:eva.example.mill.mill.AgentSortByDueDate">
            <summary>
            Sorts order by due date
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.AgentSortByDueDate.#ctor(eva.core.framework.framework.IAgentActivator,eva.core.framework.framework.ISelector)">
            <summary>
            Every agent has to have an activator and a selector
            </summary>
            <param name="act">the activator checks if the agent has to be activated</param>
            <param name="sct">the selector selects solutions on which the agent runs</param>s
        </member>
        <member name="M:eva.example.mill.mill.AgentSortByDueDate.runWithSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution},eva.core.framework.framework.ISolutionManger)">
            <summary>
            Sorts the orders on each machine by their due date.
            </summary>
            <param name="selected">the solution selected</param>
            <param name="sm">the solution manager to work with</param>
            <returns>the newly generated solution after sorting orders </returns>
        </member>
        <member name="T:eva.example.mill.mill.DbApi">
            <summary>
            The Database API
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.DbApi.ConnectionRetriever">
            <summary>
            A way to retrieve connection making framework independant of where the connection is stored)
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.DbApi.#ctor(eva.core.framework.framework.IConnectionRetriever)">
            <summary>
            The Connection Manager
            </summary>
            <param name="connectionRetriever">A way to retrieve connection making framework independant of where the connection is stored)</param>
        </member>
        <member name="M:eva.example.mill.mill.DbApi.FetchSerializedDataFromDb(System.Int32,System.Int32)">
            <summary>
            Creates a connection to the database
            executes a query which fetches data based on a solution id and batchid
            </summary>
            <param name="solutionid">the solution id of the solution</param>
            <param name="batchid">the batch id of the solution</param>
            <returns>a string which consists the serialized solution</returns>
        </member>
        <member name="M:eva.example.mill.mill.DbApi.insertIntoAllSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Inserts solutions into the database table all_slutions using a prepared statement
            </summary>
            <param name="slns"> the solutions to be inserted</param>
        </member>
        <member name="M:eva.example.mill.mill.DbApi.getBatchId">
            <summary>
            Fetches the next available batch id after running a transaction which fetches the avialable batch id
            and increments it by one
            </summary>
            <returns>the new batch id</returns>
        </member>
        <member name="M:eva.example.mill.mill.DbApi.insertIntoDeletedSolutions(System.Collections.Generic.IEnumerable{eva.core.framework.framework.ISolution})">
            <summary>
            Inserts solutions into the database table deleted_solutions using a prepared statement
            </summary>
            <param name="solutions"> the solutions to be inserted</param>
        </member>
        <member name="M:eva.example.mill.mill.DbApi.getSolutionsForABatchId(System.Int32,System.Func{System.String,eva.core.framework.framework.ISolution})">
            <summary>
            Joins deleted_solutions and all_solutions to find the non dominated solutions
            for a particular batch id 
            </summary>
            <param name="batchId">the batch id who's non-dominated solutions are to be found</param>
            <param name="convertSerializedData"> an anonymous functions which typically converts the serialized data of the solution
            fetched into a Isolution Object</param>
            <returns>non dominated solutions for that batch id</returns>
        </member>
        <member name="M:eva.example.mill.mill.DbApi.fetchNewAvailableIds(System.String,System.Int32)">
            <summary>
            Fetches new available ids
            </summary>
            <param name="tableName">the table name to fetch ids from</param>
            <param name="estimatedRange">the number of ids to fetch</param>
            <returns>The first available id and books a slot for you based on the range</returns>
        </member>
        <member name="T:eva.example.mill.mill.DBConnection">
            <summary>
            The Connection Manager
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.DBConnection.ConnectionRetriever">
            <summary>
            A way to retrieve connection making framework independant of where the connection is stored)
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.DBConnection.#ctor(eva.core.framework.framework.IConnectionRetriever)">
            <summary>
            The Connection Manager
            </summary>
            <param name="retreiveCon">A way to retrieve connection making framework independant of where the connection is stored)</param>
        </member>
        <member name="F:eva.example.mill.mill.DBConnection.connection">
            <summary>
            the MYSQL connection Object 
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.DBConnection.Connection">
            <summary>
            the MYSQL connection Object 
            </summary>
        </member>
        <member name="F:eva.example.mill.mill.DBConnection._instance">
            <summary>
            The DbConnection Instance
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.DBConnection.Instance">
            <summary>
            Returns an instace of DB Connection
            </summary>
            <returns>returns an instance of DB Connection</returns>
        </member>
        <member name="M:eva.example.mill.mill.DBConnection.IsConnect">
            <summary>
            Checks if connection is already established else creates a new connection to the database and returns true
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:eva.example.mill.mill.DBConnection.Close">
            <summary>
            closes the underlying connection object
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.DBConnection.Dispose">
            <summary>
            Disposes the connection object 
            </summary>
        </member>
        <member name="T:eva.example.mill.mill.MillProductionResources">
            <summary>
            Call representing mill resources
            </summary>
        </member>
        <member name="F:eva.example.mill.mill.MillProductionResources.milConfig">
            <summary>
            the mill config
            </summary>
        </member>
        <member name="F:eva.example.mill.mill.MillProductionResources.orderBook">
            <summary>
            the orders
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.MillProductionResources.#ctor(System.String)">
            <summary>
            Constructor to populate mill resources
            </summary>
            <param name="path">the file path</param>
        </member>
        <member name="T:eva.example.mill.mill.MillConfiguration">
            <summary>
            Class representing the mill configuration
            </summary>
        </member>
        <member name="F:eva.example.mill.mill.MillConfiguration.machines">
            <summary>
            The number of machines
            </summary>
        </member>
        <member name="F:eva.example.mill.mill.MillConfiguration.setup_time">
            <summary>
            The setup time unit
            </summary>
        </member>
        <member name="T:eva.example.mill.mill.ObjectiveLateHighPriorityOrders">
            <summary>
            Objective to evalate Hp Late orders
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveLateHighPriorityOrders.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor taking parameters from config file
            </summary>
            <param name="para">the parameters read from a config file</param>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveLateHighPriorityOrders.#ctor">
            <summary>
            default constructor it assigns name and wether
            this property is to maximized or minimized
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveLateHighPriorityOrders.evaluate(eva.core.framework.framework.ISolution)">
            <summary>
            iterates through assigned orders and calculates high priority late orders
            accross all machines
            </summary>
            <param name="solution">the solution to evaluate</param>
            <returns>the evaluation result</returns>
        </member>
        <member name="T:eva.example.mill.mill.ObjectiveLateOrders">
            <summary>
            Objective to represent the number of late orders
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveLateOrders.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor taking parameters from config file
            </summary>
            <param name="para">the parameters read from a config file</param>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveLateOrders.#ctor">
            <summary>
            default constructor it assigns name and wether
            this property is to maximized or minimized
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveLateOrders.evaluate(eva.core.framework.framework.ISolution)">
            <summary>
            Evaluates the number of late orders
            </summary>
            <param name="solution">the solution to evaluate</param>
            <returns>the number of late orders in this solution</returns>
        </member>
        <member name="T:eva.example.mill.mill.ObjectiveMachineBalancing">
            <summary>
            Objective representing machine balancing
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveMachineBalancing.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor taking parameters from config file
            </summary>
            <param name="para">the parameters read from a config file</param>s
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveMachineBalancing.#ctor">
            <summary>
            default constructor it assigns name and wether
            this property is to maximized or minimized
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveMachineBalancing.evaluate(eva.core.framework.framework.ISolution)">
            <summary>
            evaluates how effectively the machines are balanced
            </summary>
            <param name="solution">the solution to evaluate</param>
            <returns>the evaluation result</returns>
        </member>
        <member name="T:eva.example.mill.mill.ObjectiveSetups">
            <summary>
            Objective representing total setup time
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveSetups.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Constructor taking parameters from config file
            </summary>
            <param name="para">the parameters read from a config file</param>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveSetups.#ctor">
            <summary>
            default constructor it assigns name and wether
            this property is to maximized or minimized
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ObjectiveSetups.evaluate(eva.core.framework.framework.ISolution)">
            <summary>
            iterates through assigned orders and calculates setup time
            accross all machines
            </summary>
            <param name="solution">the solution to evaluate</param>
            <returns>the evaluation result</returns>
        </member>
        <member name="T:eva.example.mill.mill.OrderBook">
            <summary>
            Represents a list of orders
            </summary>
        </member>
        <member name="F:eva.example.mill.mill.OrderBook.orders">
            <summary>
            the order list in this book
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.OrderBook.#ctor(System.String)">
            <summary>
            Constructor to create order book from a file
            </summary>
            <param name="path">the file path</param>
        </member>
        <member name="T:eva.example.mill.mill.Order">
            <summary>
            Represents Orders
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.Order.orderId">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.Order.productCode">
            <summary>
            the product code
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.Order.dueDate">
            <summary>
            the due date
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.Order.highPriority">
            <summary>
            is the order high priority?
            </summary>
        </member>
        <member name="P:eva.example.mill.mill.Order.productionCycles">
            <summary>
            number of production cycles
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.Order.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructor to create orders
            </summary>
            <param name="orderid">The order id</param>
            <param name="productcode">the product code</param>
            <param name="duedate"> the due date</param>
            <param name="highpriority"> is the order high priority?</param>
            <param name="productioncycles">number of production cycles</param>
        </member>
        <member name="T:eva.example.mill.mill.ProductionSchedule">
            <summary>
            Represents a mill solution
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructir is used by the deserilizer
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the serialization context</param>
        </member>
        <member name="F:eva.example.mill.mill.ProductionSchedule.proposedSchedule">
            <summary>
            the proposed solution
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.#ctor">
            <summary>
            The initial mill solution setup
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.getResources">
            <summary>
            Returns the mill resources
            </summary>
            <returns>returns the static mill resources</returns>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.getProposedOrder">
            <summary>
            Gets the current proposed order schedule
            </summary>
            <returns>the proposed order this solution carries</returns>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.setProposedList(System.Collections.Generic.List{System.Collections.Generic.List{eva.example.mill.mill.Order}})">
            <summary>
            Setter for the proposed order
            </summary>
            <param name="newProposedList">the new order list</param>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.doClone">
            <summary>
            Creates a clone of this solution
            </summary>
            <returns>the cloned solution</returns>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.SerializeData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds more data during serialization 
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.Equals(System.Object)">
            <summary>
            Checks if an object is equal to this object
            </summary>
            <param name="obj">the object to be tested</param>
            <returns>the result of the test</returns>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.checkOrderEquality(System.Collections.Generic.IEnumerable{eva.example.mill.mill.Order},System.Collections.Generic.IEnumerable{eva.example.mill.mill.Order})">
            <summary>
            Checks if 2 order lists are equal
            </summary>
            <param name="o1">the first order list</param>
            <param name="o2">the seond order list</param>
            <returns>the result of the test</returns>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSchedule.GetHashCode">
            <summary>
            since equals only depends on proposed schedule so should hashcode 
            </summary>
            <returns>hashcode</returns>
        </member>
        <member name="T:eva.example.mill.mill.ProductionSolutionManager">
            <summary>
            Mill production Solution manager
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSolutionManager.#ctor(eva.core.framework.framework.IConnectionRetriever)">
            <summary>
            Sets up the Solution Manager for this solution
            </summary>
            <param name="connectionRetriever">the retriever to fetch connections from</param>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSolutionManager.printStuff">
            <summary>
            method used to print stuff on the console
            </summary>
        </member>
        <member name="M:eva.example.mill.mill.ProductionSolutionManager.getSolutionsForABatchId(System.Int32)">
            <summary>
            a method which tells us how to fetch solutions for a particular batch id
            </summary>
            <param name="batchId">the batch id of the solutions to be fetched</param>
            <returns>the list of non dominated solutions</returns>
        </member>
    </members>
</doc>
