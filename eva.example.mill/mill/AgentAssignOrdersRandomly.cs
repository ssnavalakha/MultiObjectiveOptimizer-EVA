using System.Collections.Generic;
using eva.core.framework.framework;

namespace eva.example.mill.mill
{
    /// <summary>
    /// assigns random orders using Random (using a non pseudo random number generator)
    /// to create a random assignable order list
    /// </summary>
    public class AgentAssignOrdersRandomly : CreaterAgent
    {
        /// <summary>
        /// Every agent has to have an activator and a selector
        /// </summary>
        /// <param name="act">the activator checks if the agent has to be activated</param>
        /// <param name="sct">the selector selects solutions on which the agent runs</param>s
        public AgentAssignOrdersRandomly(IAgentActivator act, ISelector sct) : base (act,sct)
        {
        }
        /// <summary>
        /// creates a new solution by assigning orders randomly
        /// </summary>
        /// <returns>the solutions generated by the agent</returns>
        protected override IEnumerable<ISolution> createNewSolutions()
        {
            // randomly pick an order and assign it randomly to a machine
            ProductionSchedule ps = new ProductionSchedule();
            var millResources = (MillProductionResources)ps.getResources();
            var randomListNumberGenerator = new SecureRandom();
            var proposedOrderSchedule = ps.getProposedOrder();
            var orderBook = millResources.orderBook.orders;
            int totalNoOfOrders = orderBook.Count;
            for (int i=0;i< totalNoOfOrders; i++)
            {
                int randomListNumber = randomListNumberGenerator.Next(millResources.milConfig.machines);
                var randomOrderNumberGenerator = new SecureRandom();
                int randomdomOrder = randomOrderNumberGenerator.Next(orderBook.Count);
                proposedOrderSchedule[randomListNumber].Add(orderBook[randomdomOrder]);
                orderBook.RemoveAt(randomdomOrder);
            }
            var result = new List<ISolution>();
            ps.setProposedList(proposedOrderSchedule);
            result.Add(ps);
            return result;
        }
    }
}
